<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/rabbit
     http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd">

    <!--配置connection-factory，指定连接rabbit server参数 -->
    <rabbit:connection-factory id="connectionFactory"
                           username="${mq.username}"
                           password="${mq.password}"
                           host="${mq.host}"
                           port="${mq.port}"
                           publisher-confirms="true"
    />

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
    <rabbit:admin connection-factory="connectionFactory" />

    <!--定义rabbit template用于数据的接收和发送 -->
    <!-- 给模板指定转换器 --><!-- mandatory必须设置true,return callback才生效 -->
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
         exchange="${mq.exchange}"
         confirm-callback="confirmCallBackListener"
         return-callback="returnCallBackListener"
         mandatory="true"
    />


    <!-- queue 队列声明 -->
    <!-- durable 是否持久化
        exclusive 仅创建者可以使用的私有队列，断开后自动删除
        auto-delete 当所有消费端连接断开后，是否自动删除队列 -->
    <rabbit:queue name="${mq.queue}" durable="true" auto-delete="false" exclusive="false" />
    <!--<rabbit:queue name="${mq.backqueue}" durable="true" auto-delete="false" exclusive="false" />-->
    <!--<rabbit:queue id="${mq.queue}" name="${mq.queue}_testQueue" durable="true" auto-delete="false" exclusive="false" />-->

    <!-- 交换机定义 -->
    <!--
        交换机：一个交换机可以绑定多个队列，一个队列也可以绑定到多个交换机上。
        如果没有队列绑定到交换机上，则发送到该交换机上的信息则会丢失。
        direct模式:消息与一个特定的路由器完全匹配，才会转发
        topic模式:按模式匹配
     -->
    <rabbit:direct-exchange name="${mq.exchange}" durable="true" auto-delete="false" >
        <rabbit:bindings>
            <!-- 设置消息Queue匹配的pattern (direct模式为key) -->
            <rabbit:binding queue="${mq.queue}" key="${mq.routekey}"></rabbit:binding>
            <!--<rabbit:binding queue="${mq.backqueue}" key="${mq.backroutekey}"></rabbit:binding>-->
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- 消息接收者 -->
    <!--<bean id="messageReceiver" class="com.rabbitmq.consumer.MessageConsumer"></bean>-->
    <!--&lt;!&ndash;&lt;!&ndash; queue litener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象&ndash;&gt;&ndash;&gt;-->
    <!--<rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto">-->
        <!--&lt;!&ndash;queues 监听队列，多个用逗号分隔 ref 监听器 &ndash;&gt;-->
        <!--<rabbit:listener queues="${mq.queue}" ref="messageReceiver"/>-->
    <!--</rabbit:listener-container>-->

    <!--<bean id="messageReceiver" class="com.rabbitmq.consumer.MessageConsumer"></bean>-->
    <!--<bean id="messageListenerAdapter"  class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter">-->
        <!--<constructor-arg ref="messageReceiver" />-->
        <!--<property name="defaultListenerMethod" value="rmqProducerMessage"></property>-->
    <!--</bean>-->
     <!--&lt;!&ndash;用于消息的监听的容器类SimpleMessageListenerContainer,监听队列  queues可以传多个&ndash;&gt;-->
    <!--<bean id="listenerContainer"  class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer">-->
        <!--<property name="queues" ref="${mq.queue}"></property>-->
        <!--<property name="connectionFactory" ref="connectionFactory"></property>-->
        <!--<property name="messageListener" ref="messageListenerAdapter"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置consumer, 监听的类和queue的对应关系 &ndash;&gt;-->
    <!--<rabbit:listener-container-->
            <!--connection-factory="connectionFactory" acknowledge="manual">-->
        <!--<rabbit:listener queues="${mq.queue}" ref="messageReceiver" />-->
    <!--</rabbit:listener-container>-->

</beans>